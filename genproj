#!/usr/bin/python3

"""
Initializes a project with a makefile and appropriate
directories, as well as a README.md
"""

from os import mkdir
from sys import stdout
from subprocess import run
from argparse import ArgumentParser, Namespace

dirs = {
    'SRCDIR': 'src',
    'DEPDIR': 'dep',
    'OBJDIR': 'obj',
    'BINDIR': 'bin',
}


def get_options() -> Namespace:
    parser = ArgumentParser(description='Generates/initializes a project')
    parser.add_argument(
        '-g', '--git', action='store_true',
        help='Initialize a git repository'
    )
    parser.add_argument(
        '-d', '--no-dirs', action='store_true',
        help='Do not create directories (bin, src, obj...)',
        dest='no_dirs'
    )
    parser.add_argument(
        nargs='*', metavar='V', dest='vars',
        type=str, help='Variable defaults for generated makefile'
    )
    parser.add_argument(
        '-y', '--use-yacc', dest='yacc', action='store_true',
        help='Generate variables/recipes to use yacc'
    )
    parser.add_argument(
        '-l', '--use-lex', dest='lex', action='store_true',
        help='Generate variables/recipes to use lex'
    )
    parser.add_argument(
        '-a', '--adjust', type=int, default=10,
        help='The space used to adjust variables in the makefile'
    )
    parser.add_argument(
        '-m', '--make', type=str, default='-',
        help='The output makefile path. Default is stdout for piping'
    )
    return parser.parse_args()


def git_init() -> None:
    run(['git', 'init'],
        capture_output=True, check=True)


def make_makefile(args: Namespace) -> None:
    def get_output_file():
        return stdout if args.make == '-' else open(args.make, 'w')

    vars = args.vars
    exts = {
        'SRCEXT': 'c',
        'OBJEXT': 'o',
        'DEPEXT': 'd',
    }

    prog = {
        'PROG': 'prog',
        'CC': 'gcc',
        'CXX': 'g++',
    }

    if args.yacc:
        prog.update({'YACC': 'yacc'})
    if args.lex:
        prog.update({'LEX': 'lex'})

    flag = {
        'CFLAGS': '-g -O0',
        'LDFLAGS': '',
    }

    options = [prog, dirs, exts, flag]
    with get_output_file() as file:
        def assignment(name: str, value: str) -> str:
            return f'{name.ljust(args.adjust)}:= {value}\n'

        def call(name: str, *args) -> str:
            return f'$({name} {", ".join(args)})'

        def from_sources(to: str) -> str:
            return assignment(
                f'{to}FILES',
                f'$(SRCFILES:$(SRCDIR)/%.$(SRCEXT)=$({to}DIR)/%.$({to}EXT))'
            )

        def find_ext(e: str, append: str = '') -> str:
            sep = '' if append == '' else ' '
            return f'$(shell fd ".*\\.{e}"){sep}{append}'

        def make_genfiles_line():
            genexts = []

            if args.yacc:
                genexts.append(find_ext('y'))
            if args.lex:
                genexts.append(find_ext('l'))

            return assignment(
                'GENFILES',
                ' '.join(genexts)
            )

        def make_rule(target: str, deps=[], actions=[], msg=None):
            rule = f'{target}: {" ".join(deps)}\n'
            if msg is not None:
                rule += f'\t@echo {msg}\n'
            for action in actions:
                rule += f'\t@{action}\n'
            rule += '\n'
            return rule

        file.write('# Automatically generated by the "genproj" script by Joakker\n')
        file.write('# Edit to your heart\'s content\n')

        for var in vars:
            if '=' not in vars:
                raise SystemExit(
                    'Variable must be of the form NAME=value'
                )
            else:
                key, value = var.split('=')
                for option in options:
                    if key in option.keys():
                        option[key] = value
                        break
                else:
                    raise SystemExit(f'{var} is not a valid option')

        for option in options:
            for key, value in option.items():
                file.write(f'{assignment(key, value)}')
            file.write('\n')
        file.write('\n')

        file.write(make_genfiles_line())

        file.write(
            assignment(
                'SRCFILES',
                find_ext(
                    exts['SRCEXT'],
                    call(
                        'addsuffix', f'.{exts["SRCEXT"]}',
                        call('basename', '$(GENFILES)')
                    )
                )
            )
        )

        file.write(from_sources('OBJ'))
        file.write(from_sources('DEP'))

        file.write('\n')

        file.write(
            make_rule(
                '$(OBJDIR)/%.$(OBJEXT)',
                ['$(SRCDIR)/%.$(SRCEXT)'],
                ['$(CC) $(CFLAGS) -c $< -o $@'],
                'Compiling $<'
            )
        )

        if args.yacc:
            file.write(
                make_rule(
                    '$(SRCDIR)/%.$(SRCEXT)',
                    ['$(SRCDIR)/%.y'],
                    ['$(YACC) $< -o $@'],
                    'Generating $@'
                )
            )

        if args.lex:
            file.write(
                make_rule(
                    '$(SRCDIR)/%.$(SRCEXT)',
                    ['$(SRCDIR)/%.l'],
                    ['$(LEX) $< -o $@'],
                    'Generating $@'
                )
            )

        file.write(
            make_rule(
                '$(BINDIR)/$(PROG)',
                ['$(OBJFILES)'],
                ['$(CC) $(CFLAGS) $(LDFLAGS) $^ -o $@'],
                'Linking $@'
            )
        )

        file.write('-include $(DEPFILES)\n\n')

        file.write(
            make_rule(
                'clear',
                ['$(BINDIR)/$(PROG)'],
                ['rm -f $(OBJFILES) $(DEPFILES) $<'],
                'Cleaning targets'
            )
        )

        file.write(
            make_rule(
                '$(DEPDIR)/%.$(DEPEXT)',
                ['$(SRCDIR)/%.$(SRCEXT)'],
                ["""set -e; \\
                    rm -f $@; \\
                    $(CC) -MM $< > $@.$$$$; \\
                    sed 's,\\($*\\)\\.o[ :]*,$(OBJDIR)/\\1.o $@ : ,g' < $@.$$$$ > $@; \\
                    rm -f $@.$$$$
                """]
            )
        )


def make_dirs() -> None:
    for dir in dirs.values():
        mkdir(dir)


if __name__ == '__main__':
    args = get_options()
    if args.git:
        git_init()
    make_makefile(args)
    if not args.no_dirs:
        make_dirs()
